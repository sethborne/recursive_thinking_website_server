# ================================================================================
# RECURSIVE THINKING WEBSITE - SERVERLESS TEMPLATE
# ================================================================================

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AssetsS3Bucket:
    Type: String

  UserAssetsS3Bucket:
    Type: String

  LambdaFolder:
    Description: Folder that contains Backend Lambda code
    MaxLength: 60
    MinLength: 5
    Type: String

Resources:
  # ================================================================================

  # AWS::IAM::Role

  # Any IAM roles can be attached to AWS entities.  It allows stuff we create in AWS priviledges and boundries of what they are allowed to do.  So we have can scope these down as much as we want, or give our resources as much privileges as well. mostly security stuff but also super annoying because stuff wont work alot of times its the IAM priviledges to blame.

  # ================================================================================

  RTWIAMRoleLambda:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "*"
                Resource: "*"
      RoleName: "RTW_IAMRoleLambda"

  # ================================================================================

  # AWS::Cognito::UserPool

  # Heres our Cognito User Pool, We can set all the properties to configure how we store/verify users.  This will essentially be our AUTH. it doesn't need to store user data just their email/password so we can Auth them to use our service.

  # ================================================================================

  RecursiveThinkingUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: "Welcome! Please paste this code: {####} into the modal to confirm your account with Recursive Thinking"
      EmailVerificationSubject: Verification of Recursive Thinking Profile
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
      UserPoolName: RecursiveThinkingUserPool
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      UserPoolTags: { "project": "RecursiveThinkingWebsite" }

  # ================================================================================

  # AWS::Cognito::UserPoolClient

  # This is essentially our Web App which is a client of our user pool.  We can define the refresh token validity and thats about it. We need the ID of this client to connect to our user pool (see outputs section at bottom).

  # ================================================================================

  RecursiveThinkingUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: RTW
      GenerateSecret: False
      RefreshTokenValidity: 30
      UserPoolId: !Ref RecursiveThinkingUserPool

# ================================================================================

# CLOUDFORMATION STACK - OUTPUTS

# These are our outputs to show after running our python script, available in the stack_response

# We can paste the cognito clientId and cognitoUserPoolId in main.js of our webapp to connect to that specific resource with AWS Amplify library (our auth).

# We can use the API Gateway ID as the base of the URL that we make all our api calls to. This allows us to set these values when we want to test on one 'stack' or instance of the architecture in this template.

# (NOT IMPLEMENTED YET) We will have a 'beta' stack and a 'prod' stack.

# Allows us to change these values in the webapp when we want to test things out and not break the 'prod' stack.

# Which stack gets built and what is output is specified by passing the --stage beta or --stage '' to our Python script. For now just dont pass --stage because stuffs not in production yet.

# ================================================================================

Outputs:
  CognitoUserPoolId:
    Description: userPoolId - The cognito user pool id
    Value: !Ref RecursiveThinkingUserPool
    Export:
      Name: CognitoUserPoolIdentifier

  CognitoClientId:
    Description: userPoolWebClientId - The id of the client (app) connected to cognito
    Value: !Ref RecursiveThinkingUserPoolClient
    Export:
      Name: CognitoUserPoolClientIdentifier
